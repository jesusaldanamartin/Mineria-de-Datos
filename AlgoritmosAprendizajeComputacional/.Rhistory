cp <- 0.02
lista <- list()
while(k >= i){
index <- createDataPartition(data$PCR, p=.8, list=FALSE, times=1)
tree_train <- data[index,]
tree_test <- data[-index,]
#TRAIN
dt.fit <- rpart(PCR == 1 ~ ., data = tree_train, control = 0.5)
dt.pred_train <- predict(dt.fit, tree_train)
dt.performance_train <- ifelse(dt.pred_train > 0.5, 1, 0)
trainingSuccesful <- data.frame(trainPartition = tree_train$PCR, predict = dt.performance_train)
lista <- append(lista, cp)
lista <-  append(lista,calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(tree_train$PCR, as.numeric(dt.pred_train)))
# TEST
#dt.fit2 <- rpart(PCR == 1 ~ ., data = tree_test, control = cp)
dt.pred_test <- predict(dt.fit, tree_test)
dt.performance_test <- ifelse(dt.pred_test > 0.5, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = tree_test$PCR, predict = dt.performance_test)
lista <-  append(lista,calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,as.numeric(dt.pred_test))
resultados_decisionTrees[nrow(resultados_decisionTrees) + 1,] = lista
lista <- list()
i = i+1
cp = cp+0.02    }
plot(resultados_decisionTrees$areauc_train,resultados_decisionTrees$control)
return(resultados_decisionTrees)
}
decisionTree_crossVal(data,50, cp)
decisionTree_crossVal <- function(data, k, cp) {
resultados_decisionTrees <- data.frame(
control = double(),
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
i <- 1
cp <- 0.02
lista <- list()
while(k >= i){
index <- createDataPartition(data$PCR, p=.8, list=FALSE, times=1)
tree_train <- data[index,]
tree_test <- data[-index,]
#TRAIN
dt.fit <- rpart(PCR == 1 ~ ., data = tree_train, control = 0.5)
dt.pred_train <- predict(dt.fit, tree_train)
dt.performance_train <- ifelse(dt.pred_train > 0.5, 1, 0)
trainingSuccesful <- data.frame(trainPartition = tree_train$PCR, predict = dt.performance_train)
lista <- append(lista, cp)
lista <-  append(lista,calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(tree_train$PCR, as.numeric(dt.pred_train)))
# TEST
#dt.fit2 <- rpart(PCR == 1 ~ ., data = tree_test, control = cp)
dt.pred_test <- predict(dt.fit, tree_test)
dt.performance_test <- ifelse(dt.pred_test > 0.5, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = tree_test$PCR, predict = dt.performance_test)
lista <-  append(lista,calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,as.numeric(dt.pred_test))
resultados_decisionTrees[nrow(resultados_decisionTrees) + 1,] = lista
lista <- list()
i = i+1
cp = cp+0.02    }
plot(resultados_decisionTrees$areauc_train,resultados_decisionTrees$control)
scatterplot3d(resultados_decisionTrees$areauc_train,resultados_decisionTrees$control,resultados_decisionTrees$areauc_test)
return(resultados_decisionTrees)
}
decisionTree_crossVal(data,50, cp)
supportVector_crossVal(data, 10, 1, 1)
supportVector_crossVal <- function(data, k, c, g) {
resultados2 <- data.frame(
cost = double(),
gamma = double(),
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
i <- 0
lista <- list()
while( k>= i){
index <- createDataPartition(data$PCR, p=.7, list=FALSE, times=1)
train_df <- data[index,]
test_df <- data[-index,]
svm.fit <- svm(PCR ==1 ~ ., data = train_df, cost = c,type = "C-classification" ,gamma = g, probability = TRUE)
pred <- predict(svm.fit, train_df)
#svm.pred <- attr(pred,which="probabilities")[,"TRUE"]
svm_performance_predict_train <- ifelse(pred == TRUE, 1, 0)
trainingSuccesful <- data.frame(trainPartition = train_df$PCR, predict = svm_performance_predict_train)
lista <- append(lista, c)
lista <- append(lista, g)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(train_df$PCR,  as.numeric(pred)))
# ----- TEST ----- #
pred2 <- predict(svm.fit, test_df)
#svm.pred2 <- attr(pred2,which="probabilities")[,"TRUE"]
svm_performance_predict_test <- ifelse(pred2 == TRUE, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = test_df$PCR, predict = svm_performance_predict_test)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,auc(test_df$PCR,  as.numeric(pred2)))
resultados2[nrow(resultados2) + 1,] <- lista
lista <- list()
i = i+1
c = c *10
g = g *10
}
#plot(svm.fit, train_df[train_df$PCR])
#    scatter3D(x=resultados2$AUC_test, y=resultados2$cost,z=resultados2$gamma,
#             bty = "g", pch = 20, cex = 2, ticktype = "detailed", phi = 0)
#scatter3D(resultados2$cost, resultados2$gamma, resultados2$areauc_test,bty = "g", pch = 20, cex = 2, ticktype = "detailed")
scatterplot3d(resultados2$cost, resultados2$gamma, resultados2$areauc_test)
return(resultados2)
}
supportVector_crossVal(data, 10, 1, 1)
supportVector_crossVal <- function(data, k, c, g) {
resultados2 <- data.frame(
cost = double(),
gamma = double(),
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
i <- 0
lista <- list()
while( k>= i){
index <- createDataPartition(data$PCR, p=.7, list=FALSE, times=1)
train_df <- data[index,]
test_df <- data[-index,]
svm.fit <- svm(PCR ==1 ~ ., data = train_df, cost = c,type = "C-classification" ,gamma = g, probability = TRUE)
pred <- predict(svm.fit, train_df)
#svm.pred <- attr(pred,which="probabilities")[,"TRUE"]
svm_performance_predict_train <- ifelse(pred == TRUE, 1, 0)
trainingSuccesful <- data.frame(trainPartition = train_df$PCR, predict = svm_performance_predict_train)
lista <- append(lista, c)
lista <- append(lista, g)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(train_df$PCR,  as.numeric(pred)))
# ----- TEST ----- #
pred2 <- predict(svm.fit, test_df)
#svm.pred2 <- attr(pred2,which="probabilities")[,"TRUE"]
svm_performance_predict_test <- ifelse(pred2 == TRUE, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = test_df$PCR, predict = svm_performance_predict_test)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,auc(test_df$PCR,  as.numeric(pred2)))
resultados2[nrow(resultados2) + 1,] <- lista
lista <- list()
i = i+1
c = c *10
g = g *10
}
#plot(svm.fit, train_df[train_df$PCR])
#    scatter3D(x=resultados2$AUC_test, y=resultados2$cost,z=resultados2$gamma,
#             bty = "g", pch = 20, cex = 2, ticktype = "detailed", phi = 0)
#scatter3D(resultados2$cost, resultados2$gamma, resultados2$areauc_test,bty = "g", pch = 20, cex = 2, ticktype = "detailed")
plot(resultados2$cost, resultados2$gamma, resultados2$areauc_test)
return(resultados2)
}
supportVector_crossVal(data, 10, 1, 1)
neuralNetwork_crossVal <- function(data, k ,NN, decay) {
resultados <- data.frame(
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
tabla_resultados <- data.frame(
Decay = double(),
NN = double(),
Accuracy = double(),
AUC_test = double(),
AUC_train = double()
)
i <- 1
lista <- list()
lista2 <- list()
while(k >= i){
index <- createDataPartition(data$PCR, p=.8, list=FALSE, times=1)
train_df <- data[index,]
test_df <- data[-index,]
cv_nn.fit <- nnet(PCR == 1 ~ ., data = train_df, size=i, entropy=TRUE, maxit=100000, decay=decay)
cv_nn.pred_train_df <- predict(cv_nn.fit, train_df, type = "raw")
cv_performance_predict_train <- ifelse(cv_nn.pred_train_df > 0.5, 1, 0)
trainingSuccesful <- data.frame(trainPartition = train_df$PCR, predict = cv_performance_predict_train)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(train_df$PCR, cv_nn.pred_train_df))
# ----- TEST ----- #
cv_nn.pred_test_df <- predict(cv_nn.fit, test_df, type="raw")
cv_performance_predict_test <- ifelse(cv_nn.pred_test_df > 0.5, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = test_df$PCR, predict = cv_performance_predict_test)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,auc(test_df$PCR, cv_nn.pred_test_df))
resultados[nrow(resultados) + 1,] <- lista
lista2 <- append(lista2, decay)
lista2 <- append(lista2, i)
lista2 <- append(lista2, mean(resultados$accu_test))
lista2 <- append(lista2, mean(resultados$areauc_train))
lista2 <- append(lista2, mean(resultados$areauc_test))
tabla_resultados[nrow(tabla_resultados) + 1,] <- lista2
lista <- list()
lista2 <- list()
i = i+1
decay = decay + 0.03
}
print(resultados)
scatter3D(x=tabla_resultados$AUC_test, y=tabla_resultados$NN, z=tabla_resultados$decay,
bty = "g", pch = 20, cex = 2, ticktype = "detailed", phi = 0)
return(tabla_resultados)
}
neuralNetwork_crossVal(data, 20 ,11, 0)
neuralNetwork_crossVal <- function(data, k ,NN, decay) {
resultados <- data.frame(
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
tabla_resultados <- data.frame(
Decay = double(),
NN = double(),
Accuracy = double(),
AUC_test = double(),
AUC_train = double()
)
i <- 1
lista <- list()
lista2 <- list()
while(k >= i){
index <- createDataPartition(data$PCR, p=.8, list=FALSE, times=1)
train_df <- data[index,]
test_df <- data[-index,]
cv_nn.fit <- nnet(PCR == 1 ~ ., data = train_df, size=i, entropy=TRUE, maxit=100000, decay=decay)
cv_nn.pred_train_df <- predict(cv_nn.fit, train_df, type = "raw")
cv_performance_predict_train <- ifelse(cv_nn.pred_train_df > 0.5, 1, 0)
trainingSuccesful <- data.frame(trainPartition = train_df$PCR, predict = cv_performance_predict_train)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(train_df$PCR, cv_nn.pred_train_df))
# ----- TEST ----- #
cv_nn.pred_test_df <- predict(cv_nn.fit, test_df, type="raw")
cv_performance_predict_test <- ifelse(cv_nn.pred_test_df > 0.5, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = test_df$PCR, predict = cv_performance_predict_test)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,auc(test_df$PCR, cv_nn.pred_test_df))
resultados[nrow(resultados) + 1,] <- lista
lista2 <- append(lista2, decay)
lista2 <- append(lista2, i)
lista2 <- append(lista2, mean(resultados$accu_test))
lista2 <- append(lista2, mean(resultados$areauc_train))
lista2 <- append(lista2, mean(resultados$areauc_test))
tabla_resultados[nrow(tabla_resultados) + 1,] <- lista2
lista <- list()
lista2 <- list()
i = i+1
decay = decay + 0.03
}
print(resultados)
scatter3D(x=tabla_resultados$NN, y=tabla_resultados$decay, z=tabla_resultados$AUC_test,
bty = "g", pch = 20, cex = 2, ticktype = "detailed", phi = 0)
return(tabla_resultados)
}
neuralNetwork_crossVal(data, 20 ,11, 0)
neuralNetwork_crossVal <- function(data, k ,NN, decay) {
resultados <- data.frame(
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
tabla_resultados <- data.frame(
Decay = double(),
NN = double(),
Accuracy = double(),
AUC_test = double(),
AUC_train = double()
)
i <- 1
lista <- list()
lista2 <- list()
while(k >= i){
index <- createDataPartition(data$PCR, p=.8, list=FALSE, times=1)
train_df <- data[index,]
test_df <- data[-index,]
cv_nn.fit <- nnet(PCR == 1 ~ ., data = train_df, size=i, entropy=TRUE, maxit=100000, decay=decay)
cv_nn.pred_train_df <- predict(cv_nn.fit, train_df, type = "raw")
cv_performance_predict_train <- ifelse(cv_nn.pred_train_df > 0.5, 1, 0)
trainingSuccesful <- data.frame(trainPartition = train_df$PCR, predict = cv_performance_predict_train)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(train_df$PCR, cv_nn.pred_train_df))
# ----- TEST ----- #
cv_nn.pred_test_df <- predict(cv_nn.fit, test_df, type="raw")
cv_performance_predict_test <- ifelse(cv_nn.pred_test_df > 0.5, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = test_df$PCR, predict = cv_performance_predict_test)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,auc(test_df$PCR, cv_nn.pred_test_df))
resultados[nrow(resultados) + 1,] <- lista
lista2 <- append(lista2, decay)
lista2 <- append(lista2, i)
lista2 <- append(lista2, mean(resultados$accu_test))
lista2 <- append(lista2, mean(resultados$areauc_train))
lista2 <- append(lista2, mean(resultados$areauc_test))
tabla_resultados[nrow(tabla_resultados) + 1,] <- lista2
lista <- list()
lista2 <- list()
i = i+1
decay = decay + 0.03
}
print(resultados)
#scatter3D(x=tabla_resultados$NN, y=tabla_resultados$decay, z=tabla_resultados$AUC_test,
#        bty = "g", pch = 20, cex = 2, ticktype = "detailed", phi = 0)
scatterplot3d(tabla_resultados$NN,tabla_resultados$decay,tabla_resultados$AUC_test)
return(tabla_resultados)
}
neuralNetwork_crossVal(data, 20 ,11, 0)
neuralNetwork_crossVal(data, 10 ,11, 0)
library(ggplot2)
library(lattice)
library(caret)
library(pROC) # Permite calcular el area bajo la curva.
library(nnet) # Ofrece funciones de R para el Multilayer Perceptron Network.
library(e1071)# Funciones para el algoritmo computacional Support Vector Machine.
library(rpart)# Funciones para el algoritmo computacional Decision Trees.
library(ROCR)
library(plot3D)
install.packages("scatterplot3d")
library(scatterplot3d)
datos <- read.table(file="datos_proporcionados.csv", sep=";", dec=",", header=T, stringsAsFactors = TRUE)
datos$REst[datos$REst == "I"] <- NA
datos$RPro[datos$RPro == "I"] <- NA
datos$Her2[datos$Her2 == "I"] <- NA
datos<- na.omit(datos)
data <- datos[,-1] #Eliminamos la columna Muestra.
calculo_de_Accuracy <- function(df){
m_confusion <- table(df$trainPartition, df$predict)
return (sum(diag(m_confusion))/length(df$predict))
}
index <- createDataPartition(data$PCR, p=.8, list=FALSE, times=1)
train <- data[index,]
test <- data[-index,]
#Termina o cuando llega al máximo de iteraciones o cuando ya no tiene más senido continuar...
nn.fit <- nnet(train$PCR ~ ., data = train, size=6, entropy=TRUE, maxit=1000, decay=5e-4)
nn.pred_test <- predict(nn.fit, data = test, type="raw")
performance_predict <- ifelse(nn.pred_test > 0.5, 1, 0)
truePositives <- sum(data$PCR[performance_predict==1]==1)
trueNegative <- sum(data$PCR[nn.pred_test==0]==0)
falsePositive <- sum(data$PCR[nn.pred_test==1]==0)
falseNegtive <- sum(data$PCR[nn.pred_test==0]==1)
accu_test <- (truePositives + trueNegative)/(truePositives + trueNegative + falsePositive + falseNegtive) #Accuracy
area_under_curve_test <- auc(train$PCR, nn.pred_test) #AUC
nn.fit2 <- nnet(train$PCR ~ ., data = train, size=6, entropy=TRUE, maxit=1000, decay=5e-4)
nn.pred_train <- predict(nn.fit2, data = train, type="raw")
performance_predict2 <- ifelse(nn.pred_train > 0.5, 1, 0)
truePositives2 <- sum(data$PCR[performance_predict2==1]==1)
trueNegative2 <- sum(data$PCR[nn.pred_train==0]==0)
falsePositive2 <- sum(data$PCR[nn.pred_train==1]==0)
falseNegtive2 <- sum(data$PCR[nn.pred_train==0]==1)
accu_train <- (truePositives2 + trueNegative2)/(truePositives2 + trueNegative2 + falsePositive2 + falseNegtive2) #Accuracy
area_under_curve_train <- auc(train$PCR, nn.pred_train) #AUC
accu_test
area_under_curve_test
accu_train
area_under_curve_train
neuralNetwork_crossVal <- function(data, k ,NN, decay) {
resultados <- data.frame(
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
tabla_resultados <- data.frame(
Decay = double(),
NN = double(),
Accuracy = double(),
AUC_test = double(),
AUC_train = double()
)
i <- 1
lista <- list()
lista2 <- list()
while(k >= i){
index <- createDataPartition(data$PCR, p=.8, list=FALSE, times=1)
train_df <- data[index,]
test_df <- data[-index,]
cv_nn.fit <- nnet(PCR == 1 ~ ., data = train_df, size=i, entropy=TRUE, maxit=100000, decay=decay)
cv_nn.pred_train_df <- predict(cv_nn.fit, train_df, type = "raw")
cv_performance_predict_train <- ifelse(cv_nn.pred_train_df > 0.5, 1, 0)
trainingSuccesful <- data.frame(trainPartition = train_df$PCR, predict = cv_performance_predict_train)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(train_df$PCR, cv_nn.pred_train_df))
# ----- TEST ----- #
cv_nn.pred_test_df <- predict(cv_nn.fit, test_df, type="raw")
cv_performance_predict_test <- ifelse(cv_nn.pred_test_df > 0.5, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = test_df$PCR, predict = cv_performance_predict_test)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,auc(test_df$PCR, cv_nn.pred_test_df))
resultados[nrow(resultados) + 1,] <- lista
lista2 <- append(lista2, decay)
lista2 <- append(lista2, i)
lista2 <- append(lista2, mean(resultados$accu_test))
lista2 <- append(lista2, mean(resultados$areauc_train))
lista2 <- append(lista2, mean(resultados$areauc_test))
tabla_resultados[nrow(tabla_resultados) + 1,] <- lista2
lista <- list()
lista2 <- list()
i = i+1
decay = decay + 0.03
}
print(resultados)
#scatter3D(x=tabla_resultados$NN, y=tabla_resultados$decay, z=tabla_resultados$AUC_test,
#        bty = "g", pch = 20, cex = 2, ticktype = "detailed", phi = 0)
#scatterplot3d(tabla_resultados$NN,tabla_resultados$decay,tabla_resultados$AUC_test)
return(tabla_resultados)
}
neuralNetwork_crossVal(data, 30 ,11, 0)
set.seed(2018)
data$PCR = as.numeric(data$PCR)
index <- createDataPartition(data, p=.7, list=FALSE)
svm_train <- data[index,]
svm_test <- data[-index,]
modelo <- svm(PCR == 1 ~ ., data=data, type = "C-classification", cost =1000, probability=TRUE, gamma =1)
pred <- predict(modelo,data)
#svm.pred <- attr(pred,which="probability")[,"TRUE"]
svm_performance_predict <- ifelse(pred == TRUE, 0, 1)
succesful <- data.frame(trainPartition = data$PCR, predict = svm_performance_predict)
calculo_de_Accuracy(succesful)
auc(data$PCR, as.numeric(pred))
supportVector_crossVal <- function(data, k, c, g) {
resultados2 <- data.frame(
cost = double(),
gamma = double(),
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
i <- 0
lista <- list()
while( k>= i){
index <- createDataPartition(data$PCR, p=.7, list=FALSE, times=1)
train_df <- data[index,]
test_df <- data[-index,]
svm.fit <- svm(PCR ==1 ~ ., data = train_df, cost = c,type = "C-classification" ,gamma = g, probability = TRUE)
pred <- predict(svm.fit, train_df)
#svm.pred <- attr(pred,which="probabilities")[,"TRUE"]
svm_performance_predict_train <- ifelse(pred == TRUE, 1, 0)
trainingSuccesful <- data.frame(trainPartition = train_df$PCR, predict = svm_performance_predict_train)
lista <- append(lista, c)
lista <- append(lista, g)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(train_df$PCR,  as.numeric(pred)))
# ----- TEST ----- #
pred2 <- predict(svm.fit, test_df)
#svm.pred2 <- attr(pred2,which="probabilities")[,"TRUE"]
svm_performance_predict_test <- ifelse(pred2 == TRUE, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = test_df$PCR, predict = svm_performance_predict_test)
lista <- append(lista, calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,auc(test_df$PCR,  as.numeric(pred2)))
resultados2[nrow(resultados2) + 1,] <- lista
lista <- list()
i = i+1
c = c *10
g = g *10
}
scatterplot3d(resultados2$cost, resultados2$gamma, resultados2$areauc_test)
return(resultados2)
}
supportVector_crossVal(data, 10, 1, 1)
tree <- rpart(PCR==1 ~ . , data)
result <- predict(tree, data)
result
dt.performance_train <- ifelse(result > 0.5, 1, 0)
trainingSuccesful <- data.frame(trainPartition = data$PCR, predict = dt.performance_train)
calculo_de_Accuracy(trainingSuccesful)
auc(data$PCR, result)
decisionTree_crossVal <- function(data, k, cp) {
resultados_decisionTrees <- data.frame(
control = double(),
accu_train = double(),
areauc_train = double(),
accu_test = double(),
areauc_test = double()
)
i <- 1
cp <- 0.02
lista <- list()
while(k >= i){
index <- createDataPartition(data$PCR, p=.8, list=FALSE, times=1)
tree_train <- data[index,]
tree_test <- data[-index,]
#TRAIN
dt.fit <- rpart(PCR == 1 ~ ., data = tree_train, control = 0.5)
dt.pred_train <- predict(dt.fit, tree_train)
dt.performance_train <- ifelse(dt.pred_train > 0.5, 1, 0)
trainingSuccesful <- data.frame(trainPartition = tree_train$PCR, predict = dt.performance_train)
lista <- append(lista, cp)
lista <-  append(lista,calculo_de_Accuracy(trainingSuccesful))
lista <-  append(lista,auc(tree_train$PCR, as.numeric(dt.pred_train)))
# TEST
#dt.fit2 <- rpart(PCR == 1 ~ ., data = tree_test, control = cp)
dt.pred_test <- predict(dt.fit, tree_test)
dt.performance_test <- ifelse(dt.pred_test > 0.5, 1, 0)
trainingSuccesful2 <- data.frame(trainPartition = tree_test$PCR, predict = dt.performance_test)
lista <-  append(lista,calculo_de_Accuracy(trainingSuccesful2))
lista <-  append(lista,as.numeric(dt.pred_test))
resultados_decisionTrees[nrow(resultados_decisionTrees) + 1,] = lista
lista <- list()
i = i+1
cp = cp+0.02    }
plot(resultados_decisionTrees$areauc_train,resultados_decisionTrees$control)
scatterplot3d(resultados_decisionTrees$areauc_train,resultados_decisionTrees$control,resultados_decisionTrees$areauc_test)
return(resultados_decisionTrees)
}
decisionTree_crossVal(data,50, cp)
